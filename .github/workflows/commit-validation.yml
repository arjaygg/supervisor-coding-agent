name: üìù Commit Message Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate conventional commits
        uses: wagoid/commitlint-github-action@v5
        with:
          configFile: |
            module.exports = {
              extends: ['@commitlint/config-conventional'],
              rules: {
                'type-enum': [
                  2,
                  'always',
                  [
                    'feat',
                    'fix',
                    'docs',
                    'style',
                    'refactor',
                    'test',
                    'chore',
                    'perf',
                    'ci',
                    'build',
                    'revert'
                  ]
                ],
                'scope-enum': [
                  2,
                  'always',
                  [
                    'api',
                    'frontend',
                    'backend',
                    'core',
                    'db',
                    'queue',
                    'auth',
                    'config',
                    'deps',
                    'docker',
                    'ci',
                    'docs',
                    'tests'
                  ]
                ],
                'subject-max-length': [2, 'always', 100],
                'body-max-line-length': [2, 'always', 100]
              }
            };

      - name: Add PR comment on validation failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            
            const comment = `
            ## üìù Commit Message Validation Failed
            
            Your commits don't follow the [Conventional Commits](https://www.conventionalcommits.org/) format.
            
            ### Required Format:
            \`\`\`
            <type>[optional scope]: <description>
            
            [optional body]
            
            [optional footer(s)]
            \`\`\`
            
            ### Valid Types:
            - **feat**: A new feature
            - **fix**: A bug fix
            - **docs**: Documentation only changes
            - **style**: Changes that do not affect the meaning of the code
            - **refactor**: A code change that neither fixes a bug nor adds a feature
            - **test**: Adding missing tests or correcting existing tests
            - **chore**: Changes to the build process or auxiliary tools
            - **perf**: A code change that improves performance
            - **ci**: Changes to CI configuration files and scripts
            - **build**: Changes that affect the build system or external dependencies
            - **revert**: Reverts a previous commit
            
            ### Valid Scopes:
            - **api**: Backend API changes
            - **frontend**: Frontend application changes
            - **backend**: Backend service changes
            - **core**: Core functionality changes
            - **db**: Database related changes
            - **queue**: Task queue changes
            - **auth**: Authentication/authorization
            - **config**: Configuration changes
            - **deps**: Dependency updates
            - **docker**: Docker/containerization changes
            - **ci**: CI/CD changes
            - **docs**: Documentation
            - **tests**: Test related changes
            
            ### Examples:
            \`\`\`
            feat(api): add user authentication endpoint
            fix(frontend): resolve modal dialog closing issue
            docs: update API documentation
            chore(deps): update dependencies to latest versions
            feat(api)!: redesign user management API
            \`\`\`
            
            ### Breaking Changes:
            Add \`!\` after the type/scope or include \`BREAKING CHANGE:\` in the footer for breaking changes.
            
            Please update your commit messages and push again.
            `;
            
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: comment
            });

      - name: Add success comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number: issue_number } = context.issue;
            
            // Check if we've already commented on this PR
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number
            });
            
            const botComments = comments.data.filter(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üìù Commit Message Validation')
            );
            
            if (botComments.length === 0) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: '‚úÖ **Commit Message Validation Passed** - All commits follow the conventional commits format!'
              });
            }