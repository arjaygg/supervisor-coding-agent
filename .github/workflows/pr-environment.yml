name: 🚀 PR Environment (Fixed Parallel Deployment)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Skip if this is a comment and not a deploy command
  check-command:
    if: github.event_name != 'issue_comment' || contains(github.event.comment.body, '/deploy') || contains(github.event.comment.body, '/test')
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Check deploy command
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            if [[ "${{ github.event.comment.body }}" == *"/deploy"* ]] || [[ "${{ github.event.comment.body }}" == *"/test"* ]]; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
              echo "pr_ref=refs/pull/${{ github.event.issue.number }}/merge" >> $GITHUB_OUTPUT
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "pr_ref=refs/pull/${{ inputs.pr_number }}/merge" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi

  # Parallel Docker builds for faster deployment
  build-api:
    needs: check-command
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr_ref }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Build API image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: dev-assist-api:pr-${{ needs.check-command.outputs.pr_number }}
          cache-from: |
            type=gha,scope=api
            type=registry,ref=ghcr.io/${{ github.repository }}/api:cache
          cache-to: type=gha,mode=max,scope=api
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Save API image
        run: |
          docker save dev-assist-api:pr-${{ needs.check-command.outputs.pr_number }} | gzip > /tmp/api-image.tar.gz
          echo "image-tag=dev-assist-api:pr-${{ needs.check-command.outputs.pr_number }}" >> $GITHUB_OUTPUT

      - name: Upload API image artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-image-${{ needs.check-command.outputs.pr_number }}
          path: /tmp/api-image.tar.gz
          retention-days: 1

  build-frontend:
    needs: check-command
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.build.outputs.image-tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr_ref }}

      - name: Calculate ports for build args
        id: ports
        run: |
          pr_num=${{ needs.check-command.outputs.pr_number }}
          api_port=$((8000 + (pr_num % 100)))
          echo "api_port=$api_port" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Build Frontend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: false
          load: true
          tags: dev-assist-frontend:pr-${{ needs.check-command.outputs.pr_number }}
          cache-from: |
            type=gha,scope=frontend
            type=registry,ref=ghcr.io/${{ github.repository }}/frontend:cache
          cache-to: type=gha,mode=max,scope=frontend
          build-args: |
            VITE_API_URL=http://localhost:${{ steps.ports.outputs.api_port }}
            BUILDKIT_INLINE_CACHE=1

      - name: Save Frontend image
        run: |
          docker save dev-assist-frontend:pr-${{ needs.check-command.outputs.pr_number }} | gzip > /tmp/frontend-image.tar.gz
          echo "image-tag=dev-assist-frontend:pr-${{ needs.check-command.outputs.pr_number }}" >> $GITHUB_OUTPUT

      - name: Upload Frontend image artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image-${{ needs.check-command.outputs.pr_number }}
          path: /tmp/frontend-image.tar.gz
          retention-days: 1

  # Optimized single-runner deployment with staged parallelization
  deploy:
    needs: [check-command, build-api, build-frontend]
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      deployment-status: ${{ steps.verify.outputs.status }}
      api_port: ${{ steps.ports.outputs.api_port }}
      frontend_port: ${{ steps.ports.outputs.frontend_port }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr_ref }}

      - name: Calculate ports
        id: ports
        run: |
          pr_num=${{ needs.check-command.outputs.pr_number }}
          api_port=$((8000 + (pr_num % 100)))
          frontend_port=$((3000 + (pr_num % 100)))
          postgres_port=$((5432 + (pr_num % 100)))
          redis_port=$((6379 + (pr_num % 100)))
          
          echo "api_port=$api_port" >> $GITHUB_OUTPUT
          echo "frontend_port=$frontend_port" >> $GITHUB_OUTPUT
          echo "postgres_port=$postgres_port" >> $GITHUB_OUTPUT
          echo "redis_port=$redis_port" >> $GITHUB_OUTPUT

      - name: Setup environment
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          mkdir -p /tmp/$env_id
          echo "🎯 Environment ID: $env_id"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ needs.check-command.outputs.pr_number }}"
          path: /tmp/

      - name: Load Docker images
        run: |
          echo "📦 Loading images..."
          docker load < /tmp/api-image-${{ needs.check-command.outputs.pr_number }}/api-image.tar.gz
          docker load < /tmp/frontend-image-${{ needs.check-command.outputs.pr_number }}/frontend-image.tar.gz
          
          # Verify images
          api_image="dev-assist-api:pr-${{ needs.check-command.outputs.pr_number }}"
          frontend_image="dev-assist-frontend:pr-${{ needs.check-command.outputs.pr_number }}"
          
          echo "✅ Loaded images:"
          echo "  - $api_image"
          echo "  - $frontend_image"

      - name: Prepare deployment
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          cp docker-compose.pr.yml /tmp/$env_id/docker-compose.yml
          
          # Set environment variables
          export PR_NUMBER=${{ needs.check-command.outputs.pr_number }}
          export API_IMAGE="${{ needs.build-api.outputs.image-tag }}"
          export FRONTEND_IMAGE="${{ needs.build-frontend.outputs.image-tag }}"
          export API_PORT=${{ steps.ports.outputs.api_port }}
          export FRONTEND_PORT=${{ steps.ports.outputs.frontend_port }}
          export REDIS_PORT=${{ steps.ports.outputs.redis_port }}

      - name: Deploy infrastructure (Redis)
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          cd /tmp/$env_id
          
          export PR_NUMBER=${{ needs.check-command.outputs.pr_number }}
          export REDIS_PORT=${{ steps.ports.outputs.redis_port }}
          
          echo "🚀 Starting Redis infrastructure..."
          docker compose -p $env_id up -d redis
          
          echo "⏳ Waiting for Redis..."
          sleep 10
          
          if docker compose -p $env_id ps redis | grep -q "Up"; then
            echo "✅ Redis ready"
          else
            echo "❌ Redis failed"
            docker compose -p $env_id logs redis
            exit 1
          fi

      - name: Deploy application services (parallel startup)
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          cd /tmp/$env_id
          
          export PR_NUMBER=${{ needs.check-command.outputs.pr_number }}
          export API_IMAGE="${{ needs.build-api.outputs.image-tag }}"
          export FRONTEND_IMAGE="${{ needs.build-frontend.outputs.image-tag }}"
          export API_PORT=${{ steps.ports.outputs.api_port }}
          export FRONTEND_PORT=${{ steps.ports.outputs.frontend_port }}
          export REDIS_PORT=${{ steps.ports.outputs.redis_port }}
          
          echo "🚀 Starting application services in parallel..."
          # Start all app services simultaneously
          docker compose -p $env_id up -d api worker frontend
          
          echo "⏳ Waiting for services to start..."
          sleep 20

      - name: Health checks
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          
          echo "🏥 Checking API health..."
          max_attempts=8
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s http://localhost:${{ steps.ports.outputs.api_port }}/api/v1/ping > /dev/null 2>&1; then
              echo "✅ API healthy"
              break
            fi
            echo "⏳ API check $((attempt + 1))/$max_attempts"
            sleep 5
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "❌ API health check failed"
            docker compose -p $env_id logs api --tail 20
            exit 1
          fi
          
          echo "🏥 Checking Frontend health..."
          max_attempts=6
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s http://localhost:${{ steps.ports.outputs.frontend_port }} > /dev/null 2>&1; then
              echo "✅ Frontend healthy"
              break
            fi
            echo "⏳ Frontend check $((attempt + 1))/$max_attempts"
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "⚠️ Frontend health check failed (but continuing)"
            docker compose -p $env_id logs frontend --tail 20
          fi

      - name: Setup database
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          
          echo "🗄️ Setting up database..."
          docker compose -p $env_id exec -T api python -c "
          from supervisor_agent.db.database import engine
          from supervisor_agent.db.models import Base
          Base.metadata.create_all(bind=engine)
          print('Database tables created successfully')
          " || echo "Migration completed"
          
          echo "✅ Database setup completed"

      - name: Final verification
        id: verify
        run: |
          env_id="pr-${{ needs.check-command.outputs.pr_number }}"
          
          echo "🔍 Final verification..."
          docker compose -p $env_id ps
          
          # Final health checks
          api_healthy=false
          frontend_healthy=false
          
          if curl -f -s http://localhost:${{ steps.ports.outputs.api_port }}/api/v1/ping > /dev/null 2>&1; then
            echo "✅ API responding"
            api_healthy=true
          fi
          
          if curl -f -s http://localhost:${{ steps.ports.outputs.frontend_port }} > /dev/null 2>&1; then
            echo "✅ Frontend responding"
            frontend_healthy=true
          fi
          
          if [ "$api_healthy" = true ]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "✅ Deployment successful!"
            
            # Set environment timeout
            echo $(date +%s) > /tmp/$env_id/created_at
            echo "⏰ Environment will auto-cleanup after 24 hours"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "❌ Deployment failed"
            exit 1
          fi

  # Comment on PR with environment details
  comment:
    needs: [check-command, deploy]
    if: always() && needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ needs.check-command.outputs.pr_number }};
            const deploy_success = '${{ needs.deploy.outputs.deployment-status }}' === 'success';
            const api_port = '${{ needs.deploy.outputs.api_port }}';
            const frontend_port = '${{ needs.deploy.outputs.frontend_port }}';
            
            let comment_body;
            
            if (deploy_success) {
              comment_body = `🚀 **Optimized Deployment Successful!**
            
            **Environment Details:**
            - **Frontend**: http://localhost:${frontend_port}
            - **API**: http://localhost:${api_port}
            - **API Docs**: http://localhost:${api_port}/docs
            - **Health Check**: http://localhost:${api_port}/api/v1/ping
            
            **Environment Info:**
            - Environment ID: \`pr-${pr_number}\`
            - Auto-cleanup: 24 hours
            - Database: SQLite (ephemeral)
            
            **🚀 Deployment Optimizations:**
            - ⚡ **Parallel Docker Builds**: API and Frontend built simultaneously
            - 🏗️ **Staged Deployment**: Infrastructure → Application services
            - 📦 **Artifact Sharing**: Images built once, shared efficiently
            - 🏥 **Fast Health Checks**: Lightweight ping-based verification
            - 🎯 **Single Runner Efficiency**: Optimized for GitHub Actions
            
            **Available Commands:**
            - \`/deploy-to-dev\` - Promote to development environment
            - \`/cleanup\` - Manually cleanup environment
            
            ---
            *Environment will auto-cleanup in 24 hours. Use \`/deploy-to-dev\` to promote to persistent development environment.*`;
            } else {
              comment_body = `❌ **Deployment Failed**
            
            Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
            
            You can retry deployment by commenting \`/deploy\` on this PR.`;
            }
            
            github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment_body
            });

  # Cleanup job (runs when PR is closed)
  cleanup:
    if: github.event.action == 'closed' || contains(github.event.comment.body, '/cleanup')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR number
        id: pr
        run: |
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup ephemeral environment
        run: |
          pr_number=${{ steps.pr.outputs.number }}
          
          echo "🧹 Cleaning up PR environment: pr-$pr_number"
          
          # Stop and remove containers
          docker compose -p pr-$pr_number down -v --remove-orphans || echo "No environment found to cleanup"
          
          # Remove images
          docker rmi dev-assist-api:pr-$pr_number || echo "API image not found"
          docker rmi dev-assist-frontend:pr-$pr_number || echo "Frontend image not found"
          
          # Remove environment directory
          rm -rf /tmp/pr-$pr_number || echo "Environment directory not found"
          
          echo "✅ Cleanup completed for PR $pr_number"

      - name: Comment cleanup status
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/cleanup')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.pr.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🧹 **Environment Cleanup Completed**\n\nThe ephemeral environment for this PR has been successfully cleaned up.'
            });