name: 🚀 PR Environment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to deploy'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Skip if this is a comment and not a deploy command
  check-command:
    if: github.event_name != 'issue_comment' || contains(github.event.comment.body, '/deploy') || contains(github.event.comment.body, '/test')
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      pr_number: ${{ steps.check.outputs.pr_number }}
      pr_ref: ${{ steps.check.outputs.pr_ref }}
    steps:
      - name: Check deploy command
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            if [[ "${{ github.event.comment.body }}" == *"/deploy"* ]] || [[ "${{ github.event.comment.body }}" == *"/test"* ]]; then
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
              echo "pr_ref=refs/pull/${{ github.event.issue.number }}/merge" >> $GITHUB_OUTPUT
            else
              echo "should_deploy=false" >> $GITHUB_OUTPUT
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ inputs.pr_number }}" >> $GITHUB_OUTPUT
            echo "pr_ref=refs/pull/${{ inputs.pr_number }}/merge" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "pr_number=${{ github.event.number }}" >> $GITHUB_OUTPUT
            echo "pr_ref=${{ github.ref }}" >> $GITHUB_OUTPUT
          fi

  # Quality Gates - Run linting, testing, and security checks
  quality-gates:
    needs: check-command
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install black flake8 mypy bandit pytest pytest-cov

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Python linting
        run: |
          black --check supervisor_agent/
          flake8 supervisor_agent/ --max-line-length=100 --ignore=E203,W503
          mypy supervisor_agent/ --ignore-missing-imports

      - name: Frontend linting
        run: |
          cd frontend
          npm run lint

      - name: Security scan
        run: |
          bandit -r supervisor_agent/ -f json -o bandit-report.json || true
          if [ -f bandit-report.json ]; then
            cat bandit-report.json
          fi

      - name: Python tests
        run: |
          pytest supervisor_agent/tests/ -v --cov=supervisor_agent --cov-report=xml

      - name: Frontend tests
        run: |
          cd frontend
          npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Build Docker images for the PR
  build:
    needs: [check-command, quality-gates]
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    outputs:
      api-image: ${{ steps.build-api.outputs.image }}
      frontend-image: ${{ steps.build-frontend.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr_ref }}

      - name: Calculate ports
        id: calculate-ports
        run: |
          pr_num=${{ needs.check-command.outputs.pr_number }}
          api_port=$((8000 + (pr_num % 100)))
          frontend_port=$((3000 + (pr_num % 100)))
          redis_port=$((6379 + (pr_num % 100)))
          echo "api_port=$api_port" >> $GITHUB_OUTPUT
          echo "frontend_port=$frontend_port" >> $GITHUB_OUTPUT
          echo "redis_port=$redis_port" >> $GITHUB_OUTPUT
          echo "API Port: $api_port, Frontend Port: $frontend_port, Redis Port: $redis_port"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build API image
        id: build-api
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:pr-${{ needs.check-command.outputs.pr_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            pr.number=${{ needs.check-command.outputs.pr_number }}

      - name: Build Frontend image
        id: build-frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile.dev
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:pr-${{ needs.check-command.outputs.pr_number }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_URL=http://localhost:${{ steps.calculate-ports.outputs.api_port }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            pr.number=${{ needs.check-command.outputs.pr_number }}

      - name: Output image names
        run: |
          echo "api-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:pr-${{ needs.check-command.outputs.pr_number }}" >> $GITHUB_OUTPUT
          echo "frontend-image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:pr-${{ needs.check-command.outputs.pr_number }}" >> $GITHUB_OUTPUT

  # Deploy ephemeral environment
  deploy:
    needs: [check-command, quality-gates, build]
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr_ref }}

      - name: Calculate ports
        id: ports
        run: |
          pr_num=${{ needs.check-command.outputs.pr_number }}
          api_port=$((8000 + (pr_num % 100)))
          frontend_port=$((3000 + (pr_num % 100)))
          postgres_port=$((5432 + (pr_num % 100)))
          redis_port=$((6379 + (pr_num % 100)))
          
          echo "api_port=$api_port" >> $GITHUB_OUTPUT
          echo "frontend_port=$frontend_port" >> $GITHUB_OUTPUT
          echo "postgres_port=$postgres_port" >> $GITHUB_OUTPUT
          echo "redis_port=$redis_port" >> $GITHUB_OUTPUT

      - name: Create environment directory
        run: |
          mkdir -p /tmp/pr-${{ needs.check-command.outputs.pr_number }}
          cd /tmp/pr-${{ needs.check-command.outputs.pr_number }}

      - name: Generate ephemeral environment configuration
        run: |
          cat > /tmp/pr-${{ needs.check-command.outputs.pr_number }}/.env << EOF
          # Ephemeral PR Environment Configuration
          PR_NUMBER=${{ needs.check-command.outputs.pr_number }}
          ENVIRONMENT=pr-${{ needs.check-command.outputs.pr_number }}
          
          # Application
          APP_DEBUG=true
          LOG_LEVEL=DEBUG
          SECRET_KEY=pr-secret-key-${{ needs.check-command.outputs.pr_number }}
          
          # Database (SQLite for speed)
          DATABASE_URL=sqlite:///tmp/pr-${{ needs.check-command.outputs.pr_number }}.db
          
          # Redis
          REDIS_URL=redis://localhost:${{ steps.ports.outputs.redis_port }}/0
          
          # Celery
          CELERY_BROKER_URL=redis://localhost:${{ steps.ports.outputs.redis_port }}/0
          CELERY_RESULT_BACKEND=redis://localhost:${{ steps.ports.outputs.redis_port }}/0
          
          # Claude (mock for testing)
          CLAUDE_API_KEYS=mock-key-for-testing
          CLAUDE_QUOTA_LIMIT_PER_AGENT=100
          
          # Frontend
          VITE_API_URL=http://localhost:${{ steps.ports.outputs.api_port }}
          VITE_WS_URL=ws://localhost:${{ steps.ports.outputs.api_port }}
          
          # Ports
          API_PORT=${{ steps.ports.outputs.api_port }}
          FRONTEND_PORT=${{ steps.ports.outputs.frontend_port }}
          POSTGRES_PORT=${{ steps.ports.outputs.postgres_port }}
          REDIS_PORT=${{ steps.ports.outputs.redis_port }}
          EOF

      - name: Copy Docker Compose for PR
        run: |
          cp docker-compose.pr.yml /tmp/pr-${{ needs.check-command.outputs.pr_number }}/docker-compose.yml

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy ephemeral environment
        run: |
          cd /tmp/pr-${{ needs.check-command.outputs.pr_number }}
          
          # Set image names
          export API_IMAGE="${{ needs.build.outputs.api-image }}"
          export FRONTEND_IMAGE="${{ needs.build.outputs.frontend-image }}"
          
          # Deploy with unique project name
          docker-compose -p pr-${{ needs.check-command.outputs.pr_number }} up -d
          
          # Wait for services to be ready
          sleep 30
          
          # Check if services are healthy
          max_attempts=10
          attempt=0
          while [ $attempt -lt $max_attempts ]; do
            if curl -f -s http://localhost:${{ steps.ports.outputs.api_port }}/api/v1/healthz > /dev/null 2>&1; then
              echo "API is healthy"
              break
            fi
            echo "Waiting for API to be ready... (attempt $((attempt + 1))/$max_attempts)"
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -eq $max_attempts ]; then
            echo "API failed to become healthy"
            docker-compose -p pr-${{ needs.check-command.outputs.pr_number }} logs
            exit 1
          fi

      - name: Run database migrations
        run: |
          cd /tmp/pr-${{ needs.check-command.outputs.pr_number }}
          
          # Run migrations (if using SQLite, create tables)
          docker-compose -p pr-${{ needs.check-command.outputs.pr_number }} exec -T api python -c "
          from supervisor_agent.db.database import engine
          from supervisor_agent.db.models import Base
          Base.metadata.create_all(bind=engine)
          print('Database tables created successfully')
          " || echo "Migration completed"

      - name: Set environment timeout
        run: |
          # Create a file to track environment creation time
          echo $(date +%s) > /tmp/pr-${{ needs.check-command.outputs.pr_number }}/created_at
          
          # Schedule cleanup after 24 hours
          echo "Environment will auto-cleanup after 24 hours"

  # Smoke tests
  test:
    needs: [check-command, deploy]
    if: needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Calculate ports
        id: ports
        run: |
          pr_num=${{ needs.check-command.outputs.pr_number }}
          api_port=$((8000 + (pr_num % 100)))
          frontend_port=$((3000 + (pr_num % 100)))
          echo "api_port=$api_port" >> $GITHUB_OUTPUT
          echo "frontend_port=$frontend_port" >> $GITHUB_OUTPUT

      - name: Wait for services
        run: |
          sleep 30

      - name: Health check
        run: |
          # API health check
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ steps.ports.outputs.api_port }}/api/v1/healthz)
          if [ "$response" != "200" ]; then
            echo "API health check failed with response code: $response"
            exit 1
          fi
          echo "✅ API health check passed"
          
          # Frontend check
          response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:${{ steps.ports.outputs.frontend_port }})
          if [ "$response" != "200" ]; then
            echo "Frontend check failed with response code: $response"
            exit 1
          fi
          echo "✅ Frontend check passed"

      - name: API smoke tests
        run: |
          # Test API endpoints
          api_base="http://localhost:${{ steps.ports.outputs.api_port }}/api/v1"
          
          # Test health endpoints
          curl -f "$api_base/healthz" || exit 1
          curl -f "$api_base/health/detailed" || exit 1
          
          # Test basic endpoints (if they exist)
          curl -f "$api_base/tasks" -H "Content-Type: application/json" || echo "Tasks endpoint may not be available"
          
          echo "✅ API smoke tests passed"

  # Comment on PR with environment details
  comment:
    needs: [check-command, deploy, test]
    if: always() && needs.check-command.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Calculate ports
        id: ports
        run: |
          pr_num=${{ needs.check-command.outputs.pr_number }}
          api_port=$((8000 + (pr_num % 100)))
          frontend_port=$((3000 + (pr_num % 100)))
          echo "api_port=$api_port" >> $GITHUB_OUTPUT
          echo "frontend_port=$frontend_port" >> $GITHUB_OUTPUT

      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ needs.check-command.outputs.pr_number }};
            const deploy_success = '${{ needs.deploy.result }}' === 'success';
            const test_success = '${{ needs.test.result }}' === 'success';
            
            let comment_body;
            
            if (deploy_success && test_success) {
              comment_body = `🚀 **Ephemeral Environment Deployed Successfully!**
            
            **Environment Details:**
            - **Frontend**: http://localhost:${{ steps.ports.outputs.frontend_port }}
            - **API**: http://localhost:${{ steps.ports.outputs.api_port }}
            - **API Docs**: http://localhost:${{ steps.ports.outputs.api_port }}/docs
            - **Health Check**: http://localhost:${{ steps.ports.outputs.api_port }}/api/v1/healthz
            
            **Environment Info:**
            - Environment ID: \`pr-${pr_number}\`
            - Auto-cleanup: 24 hours
            - Database: SQLite (ephemeral)
            
            **Available Commands:**
            - \`/deploy-to-dev\` - Promote to development environment
            - \`/cleanup\` - Manually cleanup environment
            
            **Test Results:** ✅ All smoke tests passed
            
            ---
            *Environment will auto-cleanup in 24 hours. Use \`/deploy-to-dev\` to promote to persistent development environment.*`;
            } else {
              comment_body = `❌ **Ephemeral Environment Deployment Failed**
            
            **Deployment Status:**
            - Deploy: ${{ needs.deploy.result == 'success' && '✅' || '❌' }}
            - Tests: ${{ needs.test.result == 'success' && '✅' || '❌' }}
            
            Please check the [workflow logs](${context.payload.repository.html_url}/actions/runs/${context.runId}) for details.
            
            You can retry deployment by commenting \`/deploy\` on this PR.`;
            }
            
            github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment_body
            });

  # Cleanup job (runs when PR is closed)
  cleanup:
    if: github.event.action == 'closed' || contains(github.event.comment.body, '/cleanup')
    runs-on: ubuntu-latest
    steps:
      - name: Get PR number
        id: pr
        run: |
          if [ "${{ github.event_name }}" == "issue_comment" ]; then
            echo "number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
          fi

      - name: Cleanup ephemeral environment
        run: |
          pr_number=${{ steps.pr.outputs.number }}
          
          echo "Cleaning up PR environment: pr-$pr_number"
          
          # Stop and remove containers
          docker-compose -p pr-$pr_number down -v --remove-orphans || echo "No environment found to cleanup"
          
          # Remove images
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:pr-$pr_number || echo "API image not found"
          docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:pr-$pr_number || echo "Frontend image not found"
          
          # Remove environment directory
          rm -rf /tmp/pr-$pr_number || echo "Environment directory not found"
          
          echo "✅ Cleanup completed for PR $pr_number"

      - name: Comment cleanup status
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/cleanup')
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.pr.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🧹 **Environment Cleanup Completed**\n\nThe ephemeral environment for this PR has been successfully cleaned up.'
            });