name: 🏷️ Release Management

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write
  checks: write
  actions: write

env:
  REGISTRY: asia-southeast1-docker.pkg.dev

jobs:
  # Create or update Release PR
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      releases-created: ${{ steps.release.outputs.releases_created }}
      frontend-release-created: ${{ steps.release.outputs['frontend--release_created'] }}
      backend-release-created: ${{ steps.release.outputs['supervisor_agent--release_created'] }}
      frontend-tag-name: ${{ steps.release.outputs['frontend--tag_name'] }}
      backend-tag-name: ${{ steps.release.outputs['supervisor_agent--tag_name'] }}
      frontend-version: ${{ steps.release.outputs['frontend--version'] }}
      backend-version: ${{ steps.release.outputs['supervisor_agent--version'] }}
    steps:
      - name: Run release-please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          config-file: .release-please-config.json
          manifest-file: .release-please-manifest.json
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show release outputs
        if: steps.release.outputs.releases_created
        run: |
          echo "Releases created: ${{ steps.release.outputs.releases_created }}"
          echo "Frontend release: ${{ steps.release.outputs['frontend--release_created'] }}"
          echo "Backend release: ${{ steps.release.outputs['supervisor_agent--release_created'] }}"
          echo "Frontend version: ${{ steps.release.outputs['frontend--version'] }}"
          echo "Backend version: ${{ steps.release.outputs['supervisor_agent--version'] }}"

  # Parallel build jobs for faster CI/CD
  build-api-image:
    needs: release-please
    if: needs.release-please.outputs.backend-release-created
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/dev-assist/api
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ needs.release-please.outputs.backend-version }}
            type=raw,value=backend-v${{ needs.release-please.outputs.backend-version }}

      - name: Build and push API image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=api
            type=registry,ref=${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/dev-assist/api:latest
          cache-to: type=gha,mode=max,scope=api
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  build-frontend-image:
    needs: release-please
    if: needs.release-please.outputs.frontend-release-created
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:v0.12.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker asia-southeast1-docker.pkg.dev --quiet

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/dev-assist/frontend
          tags: |
            type=raw,value=latest
            type=raw,value=v${{ needs.release-please.outputs.frontend-version }}
            type=raw,value=frontend-v${{ needs.release-please.outputs.frontend-version }}

      - name: Build and push Frontend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=frontend
            type=registry,ref=${{ env.REGISTRY }}/${{ secrets.GCP_PROJECT_ID }}/dev-assist/frontend:latest
          cache-to: type=gha,mode=max,scope=frontend
          platforms: linux/amd64
          build-args: |
            VITE_API_URL=https://dev.dev-assist.example.com/api
            VITE_WS_URL=wss://dev.dev-assist.example.com/ws
            BUILDKIT_INLINE_CACHE=1

  # Collect build results
  build-release-images:
    needs: [release-please, build-api-image, build-frontend-image]
    if: needs.release-please.outputs.releases-created
    runs-on: ubuntu-latest
    steps:
      - name: Collect build results
        run: |
          echo "🚀 Parallel build completed successfully!"
          echo "📦 Images built:"
          if [[ "${{ needs.release-please.outputs.backend-release-created }}" == "true" ]]; then
            echo "  - API: ${{ needs.build-api-image.outputs.image-tags }}"
            echo "  - Digest: ${{ needs.build-api-image.outputs.image-digest }}"
          fi
          if [[ "${{ needs.release-please.outputs.frontend-release-created }}" == "true" ]]; then
            echo "  - Frontend: ${{ needs.build-frontend-image.outputs.image-tags }}"
            echo "  - Digest: ${{ needs.build-frontend-image.outputs.image-digest }}"
          fi

      - name: Create release summary
        if: needs.release-please.outputs.releases-created
        run: |
          echo "## 🚀 Parallel Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "⚡ **Build Strategy**: Parallel execution for maximum speed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.release-please.outputs.frontend-release-created }}" == "true" ]]; then
            echo "✅ **Frontend**: v${{ needs.release-please.outputs.frontend-version }}" >> $GITHUB_STEP_SUMMARY
            echo "📦 Docker: \`frontend:v${{ needs.release-please.outputs.frontend-version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "🔗 Digest: \`${{ needs.build-frontend-image.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.release-please.outputs.backend-release-created }}" == "true" ]]; then
            echo "✅ **Backend**: v${{ needs.release-please.outputs.backend-version }}" >> $GITHUB_STEP_SUMMARY  
            echo "📦 Docker: \`api:v${{ needs.release-please.outputs.backend-version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "🔗 Digest: \`${{ needs.build-api-image.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏷️ **Git Tags Created:**" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.release-please.outputs.frontend-release-created }}" == "true" ]] && echo "- ${{ needs.release-please.outputs.frontend-tag-name }}" >> $GITHUB_STEP_SUMMARY
          [[ "${{ needs.release-please.outputs.backend-release-created }}" == "true" ]] && echo "- ${{ needs.release-please.outputs.backend-tag-name }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚡ **Performance Optimizations:**" >> $GITHUB_STEP_SUMMARY
          echo "- Multi-stage Docker builds with layer caching" >> $GITHUB_STEP_SUMMARY
          echo "- Parallel API and Frontend builds" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Actions cache for dependencies" >> $GITHUB_STEP_SUMMARY
          echo "- BuildKit with advanced caching" >> $GITHUB_STEP_SUMMARY

  # Optional: Trigger deployment to staging environment for releases
  deploy-to-staging:
    needs: [release-please, build-release-images]
    if: needs.release-please.outputs.releases-created && vars.AUTO_DEPLOY_RELEASES == 'true'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Trigger staging deployment
        run: |
          echo "🚀 Triggering staging deployment..."
          echo "Frontend version: ${{ needs.release-please.outputs.frontend-version }}"
          echo "Backend version: ${{ needs.release-please.outputs.backend-version }}"
          
          # This would trigger your staging deployment workflow
          # You can customize this based on your staging deployment process
          echo "Staging deployment would be triggered here"

  # Send notifications about releases
  notify-release:
    needs: [release-please, build-release-images]
    if: needs.release-please.outputs.releases-created
    runs-on: ubuntu-latest
    steps:
      - name: Send release notification
        run: |
          echo "📢 Sending release notifications..."
          echo "Release notification would be sent to:"
          echo "  - Slack #releases channel"
          echo "  - Email to development team"
          echo "  - GitHub status check"
          
          # You can integrate with Slack, email, or other notification systems here
          # Example: curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🎉 New release: v${{ needs.release-please.outputs.frontend-version }}"}' \
          #   $SLACK_WEBHOOK_URL