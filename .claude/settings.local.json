{
  "permissions": {
    "allow": [
      "Bash(git init:*)",
      "Bash(mkdir:*)",
      "Bash(git add:*)",
      "Bash(git cherry-pick:*)",
      "Bash(gh issue create:*)",
      "Bash(git commit:*)",
      "Bash(gh pr list:*)",
      "Bash(gh pr view:*)",
      "Bash(gh pr diff:*)",
      "Bash(gh pr checks:*)",
      "Bash(gh pr review:*)",
      "Bash(gh pr merge:*)",
      "Bash(git pull:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_agent.py::test_execute_task_success -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_agent.py::test_execute_task_failure -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_agent.py -k \"claude_cli\" -v)",
      "Bash(pip3 install:*)",
      "Bash(python -m pytest supervisor_agent/tests/ -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_api.py::test_health_check -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_api.py::test_create_task supervisor_agent/tests/test_api.py::test_get_tasks -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_api.py::test_create_task -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_api.py -k \"not detailed_health_check and not metrics_endpoint\" -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_quota.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_agent.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_agent.py::test_prompt_template_system -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_api.py::test_detailed_health_check supervisor_agent/tests/test_api.py::test_metrics_endpoint -v)",
      "Bash(python -m pytest supervisor_agent/tests/ --tb=short)",
      "Bash(chmod:*)",
      "Bash(./scripts/health-check.sh:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_cost_tracking.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_cost_tracking.py::TestTokenEstimator -v)",
      "Bash(python -m pytest supervisor_agent/tests/ -x --tb=short -q)",
      "Bash(python -m pytest supervisor_agent/tests/test_cost_tracking.py::TestCostTracker::test_track_task_execution -v)",
      "Bash(python -m pytest supervisor_agent/tests/ --tb=short -q)",
      "Bash(python -m pytest supervisor_agent/tests/test_cost_tracking.py::TestCostTrackingCRUD::test_get_cost_summary_empty_data -v)",
      "Bash(rm:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_websocket.py -v)",
      "Bash(npm test)",
      "Bash(npm install)",
      "Bash(python -m pytest supervisor_agent/tests/test_subscription_intelligence.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_subscription_integration.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_subscription_integration.py::TestIntelligentTaskProcessor::test_process_task_new_request -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_static_analysis.py -x --tb=short -q)",
      "Bash(git branch:*)",
      "Bash(./scripts/cleanup-github-gcp-integration.sh:*)",
      "Bash(gcloud iam workload-identity-pools list:*)",
      "Bash(git remote get-url:*)",
      "Bash(./scripts/setup-github-gcp-simple.sh:*)",
      "Bash(gcloud iam workload-identity-pools create:*)",
      "Bash(gcloud iam workload-identity-pools describe:*)",
      "Bash(gcloud iam workload-identity-pools providers create-oidc:*)",
      "Bash(gcloud iam service-accounts add-iam-policy-binding:*)",
      "Bash(gcloud iam workload-identity-pools providers describe:*)",
      "Bash(rg:*)",
      "Bash(gh pr close:*)",
      "Bash(sed:*)",
      "Bash(mv:*)",
      "Bash(git push:*)",
      "Bash(gh pr create:*)",
      "Bash(git check-ignore:*)",
      "Bash(git checkout:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(touch:*)",
      "Bash(gh workflow run:*)",
      "Bash(gcloud compute instances list:*)",
      "Bash(docker-compose:*)",
      "Bash(docker compose:*)",
      "Bash(echo:*)",
      "Bash(env)",
      "Bash(gh pr comment:*)",
      "Bash(ls:*)",
      "Bash(git stash:*)",
      "Bash(find:*)",
      "Bash(npm run build:*)",
      "Bash(npm install:*)",
      "Bash(docker build:*)",
      "Bash(git rm:*)",
      "Bash(true)",
      "Bash(gh issue list:*)",
      "Bash(gh issue view:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_integration.py::TestCriticalUserFlows::test_create_and_process_task_flow -v)",
      "WebFetch(domain:docs.anthropic.com)",
      "Bash(npm test:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(cat:*)",
      "Bash(pkill:*)",
      "Bash(curl:*)",
      "Bash(timeout 30s npm test -- --run src/lib/utils/api.integration.test.ts)",
      "Bash(timeout:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_claude_cli_integration.py -v)",
      "Bash(diff:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_claude_cli_integration.py::TestClaudeCliIntegration::test_mock_mode_configuration -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_claude_cli_integration.py::TestClaudeCliIntegration::test_claude_cli_validation_with_mock_mode -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_claude_cli_integration.py::TestClaudeCliIntegration::test_task_execution_error_handling -v)",
      "Bash(gh workflow list:*)",
      "Bash(gh workflow view:*)",
      "Bash(gh run watch:*)",
      "Bash(npm ci:*)",
      "Bash(git fetch:*)",
      "Bash(grep:*)",
      "Bash(git switch:*)",
      "Bash(gh pr:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_workflow_engine.py -v)",
      "Bash(python3 -m pytest supervisor_agent/tests/test_workflow_engine.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_workflow_engine.py::TestWorkflowEngine::test_execute_workflow_success -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_dag_resolver.py -v)",
      "Bash(python -m pytest supervisor_agent/tests/test_workflow_engine.py supervisor_agent/tests/test_dag_resolver.py -v)",
      "Bash(gh api:*)",
      "Bash(gcloud compute ssh:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_analytics.py -v)",
      "Bash(python3 -m pytest supervisor_agent/tests/test_analytics.py -v)",
      "Bash(git remote:*)",
      "Bash(python -m pytest supervisor_agent/tests/test_analytics.py -v --tb=short)",
      "Bash(python -m pip:*)",
      "Bash(docker:*)",
      "Bash(cp:*)",
      "Bash(alembic revision:*)",
      "Bash(venv/bin/python:*)",
      "Bash(git for-each-ref:*)",
      "Bash(alembic:*)",
      "Bash(git restore:*)",
      "Bash(PYTHONPATH=/home/devag/git/dev-assist alembic -c db/alembic.ini upgrade head)",
      "Bash(DATABASE_URL=\"sqlite:///./supervisor_agent.db\" python -m supervisor_agent.api.main)",
      "Bash(DATABASE_URL=sqlite:///./supervisor_agent.db alembic -c supervisor_agent/db/alembic.ini upgrade head)",
      "Bash(DATABASE_URL=sqlite:///./supervisor_agent.db alembic -c supervisor_agent/db/alembic.ini current)",
      "Bash(DATABASE_URL=sqlite:///./supervisor_agent.db alembic -c supervisor_agent/db/alembic.ini stamp 001_analytics)",
      "Bash(DATABASE_URL=sqlite:///./supervisor_agent.db alembic -c supervisor_agent/db/alembic.ini downgrade 001_analytics)",
      "Bash(python:*)",
      "Bash(DATABASE_URL=sqlite:///./supervisor_agent.db python scripts/setup_database.py)",
      "Bash(DATABASE_URL=sqlite:///./supervisor_agent.db python:*)",
      "Bash(./scripts/quick-deploy.sh:*)",
      "Bash(./scripts/build-optimized.sh:*)",
      "Bash(time docker buildx build:*)",
      "Bash(git rebase:*)"
    ],
    "deny": []
  },
  "auto_approve": true
}