version: '3.8'

# Production Docker Compose Configuration
# Optimized for cost-efficient Google Cloud VM deployment (f1-micro friendly)

services:
  # PostgreSQL Database - Production Configuration
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: supervisor_agent
      POSTGRES_USER: supervisor
      POSTGRES_PASSWORD: supervisor_pass
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 32MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 128MB
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./deployment/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=50
      -c shared_buffers=32MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=16MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=4MB
      -c default_statistics_target=50
      -c random_page_cost=1.1
      -c effective_io_concurrency=100
      -c work_mem=2MB
      -c min_wal_size=128MB
      -c max_wal_size=512MB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supervisor -d supervisor_agent"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.4'
        reservations:
          memory: 128M
          cpus: '0.2'
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache & Message Broker - Production Configuration
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"  # Bind to localhost only
    volumes:
      - redis_data:/data
      - ./deployment/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.2'
        reservations:
          memory: 32M
          cpus: '0.1'
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Main API Application - Production Configuration
  api:
    image: asia-southeast1-docker.pkg.dev/${GCP_PROJECT_ID}/dev-assist/api:latest
    restart: unless-stopped
    expose:
      - "8000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=web,websecure"
      - "traefik.http.routers.api.priority=10"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    environment:
      - DATABASE_URL=postgresql://supervisor:supervisor_pass@postgres:5432/supervisor_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - APP_DEBUG=false
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    volumes:
      - app_logs:/app/logs
      - ./deployment/supervisor_agent/logging.conf:/app/logging.conf
    deploy:
      resources:
        limits:
          memory: 384M
          cpus: '0.5'
        reservations:
          memory: 192M
          cpus: '0.3'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    user: "app:app"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Celery Worker - Production Configuration
  worker:
    image: asia-southeast1-docker.pkg.dev/${GCP_PROJECT_ID}/dev-assist/api:latest
    restart: unless-stopped
    command: >
      celery -A supervisor_agent.queue.celery_app worker
      --loglevel=info
      --concurrency=1
      --max-tasks-per-child=500
      --time-limit=3600
      --soft-time-limit=3300
      --prefetch-multiplier=1
      --optimization=fair
    environment:
      - DATABASE_URL=postgresql://supervisor:supervisor_pass@postgres:5432/supervisor_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - APP_DEBUG=false
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
      - CELERY_WORKER_CONCURRENCY=4
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=1000
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - worker_temp:/tmp
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.2'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      replicas: 1
    security_opt:
      - no-new-privileges:true
    user: "app:app"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "celery", "-A", "supervisor_agent.queue.celery_app", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 60s

  # Celery Beat (Scheduler) - Production Configuration
  beat:
    image: asia-southeast1-docker.pkg.dev/${GCP_PROJECT_ID}/dev-assist/api:latest
    restart: unless-stopped
    command: >
      celery -A supervisor_agent.queue.celery_app beat
      --loglevel=info
      --schedule=/tmp/celerybeat-schedule
      --pidfile=/tmp/celerybeat.pid
    environment:
      - DATABASE_URL=postgresql://supervisor:supervisor_pass@postgres:5432/supervisor_agent
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - APP_DEBUG=false
      - LOG_LEVEL=INFO
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - app_logs:/app/logs
      - beat_data:/tmp
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    user: "app:app"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend Application - Production Build
  frontend:
    image: asia-southeast1-docker.pkg.dev/${GCP_PROJECT_ID}/dev-assist/frontend:latest
    restart: unless-stopped
    expose:
      - "3000"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web,websecure"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    environment:
      - NODE_ENV=production
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.3'
        reservations:
          memory: 64M
          cpus: '0.1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Internal)
  # Traefik - Dynamic reverse proxy with automatic service discovery
  traefik:
    image: traefik:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "127.0.0.1:8080:8080"  # Dashboard (localhost only)
    environment:
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL:-admin@example.com}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./deployment/traefik/traefik.toml:/traefik.toml:ro
      - ./deployment/traefik/acme.json:/acme.json
      - traefik_data:/data
    command:
      - --configfile=/traefik.toml
    deploy:
      resources:
        limits:
          memory: 48M
          cpus: '0.1'
        reservations:
          memory: 24M
          cpus: '0.05'
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Monitoring services disabled for cost-optimized development environment
  # Uncomment below for full production monitoring (requires more resources)
  
  # prometheus:
  #   image: prom/prometheus:latest
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:9090:9090"
  #   volumes:
  #     - ./deployment/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - prometheus_data:/prometheus
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #         cpus: '0.25'

  # loki:
  #   image: grafana/loki:latest
  #   restart: unless-stopped
  #   ports:
  #     - "127.0.0.1:3100:3100"
  #   volumes:
  #     - ./deployment/loki/loki-config.yml:/etc/loki/local-config.yaml
  #     - loki_data:/loki
  #   deploy:
  #     resources:
  #       limits:
  #         memory: 256M
  #         cpus: '0.25'

# Named volumes for persistent data
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  worker_temp:
    driver: local
  beat_data:
    driver: local
  traefik_data:
    driver: local
  # Monitoring volumes (disabled for cost optimization)
  # prometheus_data:
  #   driver: local
  # loki_data:
  #   driver: local

# Networks
networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Production-specific configurations
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

x-restart-policy: &default-restart-policy
  restart_policy:
    condition: on-failure
    delay: 5s
    max_attempts: 3
    window: 120s

x-security-opts: &default-security-opts
  security_opt:
    - no-new-privileges:true