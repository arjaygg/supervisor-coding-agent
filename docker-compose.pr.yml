version: '3.8'

# Docker Compose configuration for ephemeral PR environments
# Optimized for fast deployment, testing, and automatic cleanup

services:
  # SQLite-based API for fast startup
  api:
    image: ${API_IMAGE:-dev-assist-api:latest}
    container_name: pr-${PR_NUMBER:-0}-api
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - APP_DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=sqlite:///tmp/pr-${PR_NUMBER:-0}.db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=pr-secret-key-${PR_NUMBER:-0}
      - CLAUDE_API_KEYS=mock-key-for-testing
      - CLAUDE_QUOTA_LIMIT_PER_AGENT=100
      - MOCK_EXTERNAL_SERVICES=true
      - PYTHONPATH=/app
    volumes:
      - pr_data_${PR_NUMBER:-0}:/tmp
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - pr-network
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"
      - "pr.component=api"

  # Lightweight worker for task processing
  worker:
    image: ${API_IMAGE:-dev-assist-api:latest}
    container_name: pr-${PR_NUMBER:-0}-worker
    command: celery -A supervisor_agent.queue.celery_app worker --loglevel=debug --concurrency=2
    environment:
      - APP_DEBUG=true
      - LOG_LEVEL=DEBUG
      - DATABASE_URL=sqlite:///tmp/pr-${PR_NUMBER:-0}.db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=pr-secret-key-${PR_NUMBER:-0}
      - CLAUDE_API_KEYS=mock-key-for-testing
      - MOCK_EXTERNAL_SERVICES=true
      - PYTHONPATH=/app
    volumes:
      - pr_data_${PR_NUMBER:-0}:/tmp
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - pr-network
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"
      - "pr.component=worker"

  # Redis for caching and message brokering
  redis:
    image: redis:7-alpine
    container_name: pr-${PR_NUMBER:-0}-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - pr_redis_${PR_NUMBER:-0}:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - pr-network
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"
      - "pr.component=redis"

  # Frontend development server
  frontend:
    image: ${FRONTEND_IMAGE:-dev-assist-frontend:latest}
    container_name: pr-${PR_NUMBER:-0}-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:${API_PORT:-8000}
      - VITE_WS_URL=ws://localhost:${API_PORT:-8000}
      - VITE_PR_NUMBER=${PR_NUMBER:-0}
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - pr-network
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"
      - "pr.component=frontend"

  # Development tools and utilities
  tools:
    image: ${API_IMAGE:-dev-assist-api:latest}
    container_name: pr-${PR_NUMBER:-0}-tools
    command: tail -f /dev/null  # Keep container running
    environment:
      - APP_DEBUG=true
      - DATABASE_URL=sqlite:///tmp/pr-${PR_NUMBER:-0}.db
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    volumes:
      - pr_data_${PR_NUMBER:-0}:/tmp
      - ./scripts:/scripts:ro
    depends_on:
      - api
      - redis
    restart: unless-stopped
    networks:
      - pr-network
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"
      - "pr.component=tools"
    profiles:
      - tools  # Only start when explicitly requested

# Named volumes for PR-specific data
volumes:
  pr_data_${PR_NUMBER:-0}:
    name: pr-${PR_NUMBER:-0}-data
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"
  pr_redis_${PR_NUMBER:-0}:
    name: pr-${PR_NUMBER:-0}-redis
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"

# Isolated network for PR environment
networks:
  pr-network:
    name: pr-${PR_NUMBER:-0}-network
    driver: bridge
    labels:
      - "pr.number=${PR_NUMBER:-0}"
      - "pr.environment=ephemeral"

# Additional configurations for development
x-common-variables: &common-variables
  PR_NUMBER: ${PR_NUMBER:-0}
  ENVIRONMENT: pr-${PR_NUMBER:-0}
  APP_DEBUG: true
  LOG_LEVEL: DEBUG
  MOCK_EXTERNAL_SERVICES: true

x-common-labels: &common-labels
  pr.number: ${PR_NUMBER:-0}
  pr.environment: ephemeral
  pr.created_at: ${CREATED_AT:-}
  pr.auto_cleanup: true